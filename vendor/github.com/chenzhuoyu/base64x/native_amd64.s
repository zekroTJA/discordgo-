// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "textflag.h"

TEXT Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___(SB), NOSPLIT, $0
LCPI0_0:
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x04 // .byte 4
	BYTE $0x03 // .byte 3
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x07 // .byte 7
	BYTE $0x06 // .byte 6
	BYTE $0x08 // .byte 8
	BYTE $0x07 // .byte 7
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x0b // .byte 11
	BYTE $0x0a // .byte 10
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x04 // .byte 4
	BYTE $0x03 // .byte 3
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x07 // .byte 7
	BYTE $0x06 // .byte 6
	BYTE $0x08 // .byte 8
	BYTE $0x07 // .byte 7
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x0b // .byte 11
	BYTE $0x0a // .byte 10

LCPI0_1:
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032
	WORD $0xfc00 // .word 64512
	WORD $0x0fc0 // .word 4032

LCPI0_2:
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024
	WORD $0x0040 // .word 64
	WORD $0x0400 // .word 1024

LCPI0_3:
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63
	WORD $0x03f0 // .word 1008
	WORD $0x003f // .word 63

LCPI0_4:
	QUAD $0x1a1a1a1a1a1a1a1a; QUAD $0x1a1a1a1a1a1a1a1a // .space 16, '\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a'
	QUAD $0x1a1a1a1a1a1a1a1a; QUAD $0x1a1a1a1a1a1a1a1a // .space 16, '\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a'

LCPI0_5:
	QUAD $0x3333333333333333; QUAD $0x3333333333333333 // .space 16, '3333333333333333'
	QUAD $0x3333333333333333; QUAD $0x3333333333333333 // .space 16, '3333333333333333'

LCPI0_6:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

_b64encode:
	BYTE  $0x55                                 // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD  $0x5741                               // pushq        %r15
	WORD  $0x5641                               // pushq        %r14
	WORD  $0x5441                               // pushq        %r12
	BYTE  $0x53                                 // pushq        %rbx
	MOVQ  8(SI), R9
	TESTQ R9, R9
	JE    LBB0_23
	MOVQ  0(DI), R8
	ADDQ  8(DI), R8
	MOVQ  0(SI), R12
	ADDQ  R12, R9
	TESTB $1, DX
	LONG  $0xc50d8d48; WORD $0x000e; BYTE $0x00 // leaq         $3781(%rip), %rcx  /* _VecEncodeCharsetStd(%rip) */
	LONG  $0x1e158d4c; WORD $0x000f; BYTE $0x00 // leaq         $3870(%rip), %r10  /* _VecEncodeCharsetURL(%rip) */
	LONG  $0xd1440f4c                           // cmoveq       %rcx, %r10
	LONG  $0x730d8d48; WORD $0x000e; BYTE $0x00 // leaq         $3699(%rip), %rcx  /* _TabEncodeCharsetStd(%rip) */
	LONG  $0xcc1d8d4c; WORD $0x000e; BYTE $0x00 // leaq         $3788(%rip), %r11  /* _TabEncodeCharsetURL(%rip) */
	LONG  $0xd9440f4c                           // cmoveq       %rcx, %r11
	LEAQ  -28(R9), SI
	CMPQ  R12, SI
	JBE   LBB0_3
	MOVQ  R8, R14
	JMP   LBB0_5

LBB0_3:
	LONG $0x6f7ec1c4; BYTE $0x02 // vmovdqu      (%r10), %ymm0
	QUAD $0xfffffeb60d6ffec5     // vmovdqu      $-330(%rip), %ymm1  /* LCPI0_0(%rip) */
	QUAD $0xfffffece156ffec5     // vmovdqu      $-306(%rip), %ymm2  /* LCPI0_1(%rip) */
	QUAD $0xfffffee61d6ffec5     // vmovdqu      $-282(%rip), %ymm3  /* LCPI0_2(%rip) */
	QUAD $0xfffffefe256ffec5     // vmovdqu      $-258(%rip), %ymm4  /* LCPI0_3(%rip) */
	QUAD $0xffffff162d6ffec5     // vmovdqu      $-234(%rip), %ymm5  /* LCPI0_4(%rip) */
	QUAD $0xffffff2e356ffec5     // vmovdqu      $-210(%rip), %ymm6  /* LCPI0_5(%rip) */
	QUAD $0xffffff463d6ffec5     // vmovdqu      $-186(%rip), %ymm7  /* LCPI0_6(%rip) */
	MOVQ R8, R14

LBB0_4:
	LONG $0x6f7a41c4; WORD $0x2404 // vmovdqu      (%r12), %xmm8
	QUAD $0x010c2444383d43c4       // vinserti128  $1, $12(%r12), %ymm8, %ymm8
	LONG $0x003d62c4; BYTE $0xc1   // vpshufb      %ymm1, %ymm8, %ymm8
	LONG $0xcadb3dc5               // vpand        %ymm2, %ymm8, %ymm9
	LONG $0xcbe435c5               // vpmulhuw     %ymm3, %ymm9, %ymm9
	LONG $0xc4db3dc5               // vpand        %ymm4, %ymm8, %ymm8
	LONG $0x712dc1c4; WORD $0x08f0 // vpsllw       $8, %ymm8, %ymm10
	LONG $0x713dc1c4; WORD $0x04f0 // vpsllw       $4, %ymm8, %ymm8
	LONG $0x0e3d43c4; WORD $0xaac2 // vpblendw     $170, %ymm10, %ymm8, %ymm8
	LONG $0xeb3d41c4; BYTE $0xc1   // vpor         %ymm9, %ymm8, %ymm8
	LONG $0x645541c4; BYTE $0xc8   // vpcmpgtb     %ymm8, %ymm5, %ymm9
	LONG $0xcfdb35c5               // vpand        %ymm7, %ymm9, %ymm9
	LONG $0xd6d83dc5               // vpsubusb     %ymm6, %ymm8, %ymm10
	LONG $0xeb3541c4; BYTE $0xca   // vpor         %ymm10, %ymm9, %ymm9
	LONG $0x007d42c4; BYTE $0xc9   // vpshufb      %ymm9, %ymm0, %ymm9
	LONG $0xfc3541c4; BYTE $0xc0   // vpaddb       %ymm8, %ymm9, %ymm8
	LONG $0x7f7e41c4; BYTE $0x06   // vmovdqu      %ymm8, (%r14)
	ADDQ $32, R14
	ADDQ $24, R12
	CMPQ R12, SI
	JBE  LBB0_4

LBB0_5:
	LEAQ -24(R9), SI
	CMPQ R12, SI
	JA   LBB0_7
	LONG $0x6f7ac1c4; WORD $0x2404             // vmovdqu      (%r12), %xmm0
	LONG $0x6f7ac1c4; WORD $0x244c; BYTE $0x08 // vmovdqu      $8(%r12), %xmm1
	LONG $0xd973f1c5; BYTE $0x04               // vpsrldq      $4, %xmm1, %xmm1
	LONG $0x387de3c4; WORD $0x01c1             // vinserti128  $1, %xmm1, %ymm0, %ymm0
	QUAD $0xfffdf105007de2c4; BYTE $0xff       // vpshufb      $-527(%rip), %ymm0, %ymm0  /* LCPI0_0(%rip) */
	QUAD $0xfffffe090ddbfdc5                   // vpand        $-503(%rip), %ymm0, %ymm1  /* LCPI0_1(%rip) */
	QUAD $0xfffffe210de4f5c5                   // vpmulhuw     $-479(%rip), %ymm1, %ymm1  /* LCPI0_2(%rip) */
	QUAD $0xfffffe3905dbfdc5                   // vpand        $-455(%rip), %ymm0, %ymm0  /* LCPI0_3(%rip) */
	LONG $0xf071edc5; BYTE $0x08               // vpsllw       $8, %ymm0, %ymm2
	LONG $0xf071fdc5; BYTE $0x04               // vpsllw       $4, %ymm0, %ymm0
	LONG $0x0e7de3c4; WORD $0xaac2             // vpblendw     $170, %ymm2, %ymm0, %ymm0
	LONG $0xc1ebfdc5                           // vpor         %ymm1, %ymm0, %ymm0
	QUAD $0xfffffe3d0d6ffec5                   // vmovdqu      $-451(%rip), %ymm1  /* LCPI0_4(%rip) */
	LONG $0xc864f5c5                           // vpcmpgtb     %ymm0, %ymm1, %ymm1
	LONG $0x6f7ec1c4; BYTE $0x12               // vmovdqu      (%r10), %ymm2
	QUAD $0xfffffe4c1dd8fdc5                   // vpsubusb     $-436(%rip), %ymm0, %ymm3  /* LCPI0_5(%rip) */
	QUAD $0xfffffe640ddbf5c5                   // vpand        $-412(%rip), %ymm1, %ymm1  /* LCPI0_6(%rip) */
	LONG $0xcbebf5c5                           // vpor         %ymm3, %ymm1, %ymm1
	LONG $0x006de2c4; BYTE $0xc9               // vpshufb      %ymm1, %ymm2, %ymm1
	LONG $0xc0fcf5c5                           // vpaddb       %ymm0, %ymm1, %ymm0
	LONG $0x7f7ec1c4; BYTE $0x06               // vmovdqu      %ymm0, (%r14)
	ADDQ $32, R14
	ADDQ $24, R12

LBB0_7:
	CMPQ R12, R9
	JE   LBB0_22
	LEAQ -4(R9), R10
	CMPQ R12, R10
	JA   LBB0_11

LBB0_9:
	MOVL    0(R12), SI
	BSWAPL  SI
	MOVQ    SI, R15
	SHRQ    $26, R15
	MOVL    SI, CX
	SHRL    $20, CX
	ANDL    $63, CX
	MOVL    SI, BX
	SHRL    $14, BX
	ANDL    $63, BX
	SHRL    $8, SI
	ANDL    $63, SI
	ADDQ    $3, R12
	MOVBLZX 0(R11)(R15*1), AX
	MOVB    AX, 0(R14)
	MOVBLZX 0(R11)(CX*1), AX
	MOVB    AX, 1(R14)
	MOVBLZX 0(R11)(BX*1), AX
	MOVB    AX, 2(R14)
	MOVBLZX 0(R11)(SI*1), AX
	MOVB    AX, 3(R14)
	ADDQ    $4, R14
	CMPQ    R12, R10
	JBE     LBB0_9

LBB0_11:
	SUBQ    R12, R9
	MOVBLZX 0(R12), R10
	CMPQ    R9, $1
	JE      LBB0_18
	MOVQ    R10, SI
	SHLQ    $16, SI
	CMPQ    R9, $2
	JE      LBB0_15
	CMPQ    R9, $3
	JNE     LBB0_22
	MOVBLZX 2(R12), DX
	ORL     DX, SI
	MOVBLZX 1(R12), AX
	SHLL    $8, AX
	ORL     SI, AX
	SHRQ    $2, R10
	MOVB    0(R11)(R10*1), CX
	MOVB    CX, 0(R14)
	MOVL    AX, CX
	SHRL    $12, CX
	ANDL    $63, CX
	MOVB    0(R11)(CX*1), CX
	MOVB    CX, 1(R14)
	SHRL    $6, AX
	ANDL    $63, AX
	MOVB    0(R11)(AX*1), AX
	MOVB    AX, 2(R14)
	ANDL    $63, DX
	MOVB    0(R11)(DX*1), AX
	MOVB    AX, 3(R14)
	JMP     LBB0_21

LBB0_15:
	MOVBLZX 1(R12), AX
	MOVL    AX, CX
	SHLL    $8, CX
	ORL     SI, CX
	SHRQ    $2, R10
	MOVB    0(R11)(R10*1), BX
	MOVB    BX, 0(R14)
	SHRL    $12, CX
	ANDL    $63, CX
	MOVB    0(R11)(CX*1), CX
	MOVB    CX, 1(R14)
	ANDL    $15, AX
	MOVB    0(R11)(AX*4), AX
	MOVB    AX, 2(R14)
	TESTB   $2, DX
	JNE     LBB0_16
	MOVB    $61, 3(R14)
	JMP     LBB0_21

LBB0_18:
	MOVQ  R10, AX
	SHRQ  $2, AX
	MOVB  0(R11)(AX*1), AX
	MOVB  AX, 0(R14)
	SHLL  $4, R10
	ANDL  $48, R10
	MOVB  0(R11)(R10*1), AX
	MOVB  AX, 1(R14)
	TESTB $2, DX
	JNE   LBB0_19
	MOVW  $15677, 2(R14)

LBB0_21:
	ADDQ $4, R14
	JMP  LBB0_22

LBB0_16:
	ADDQ $3, R14
	JMP  LBB0_22

LBB0_19:
	ADDQ $2, R14

LBB0_22:
	SUBQ R8, R14
	ADDQ R14, 8(DI)

LBB0_23:
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LCPI1_0:
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x13 // .byte 19
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x13 // .byte 19
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_1:
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x11 // .byte 17
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x11 // .byte 17
	BYTE $0x04 // .byte 4
	BYTE $0xbf // .byte 191
	BYTE $0xbf // .byte 191
	BYTE $0xb9 // .byte 185
	BYTE $0xb9 // .byte 185
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_2:
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84

LCPI1_3:
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x70 // .byte 112
	BYTE $0xa8 // .byte 168
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf8 // .byte 248
	BYTE $0xf0 // .byte 240
	BYTE $0x50 // .byte 80
	BYTE $0x50 // .byte 80
	BYTE $0x54 // .byte 84
	BYTE $0x50 // .byte 80
	BYTE $0x70 // .byte 112

LCPI1_4:
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'

LCPI1_5:
	QUAD $0x5f5f5f5f5f5f5f5f; QUAD $0x5f5f5f5f5f5f5f5f // .space 16, '________________'
	QUAD $0x5f5f5f5f5f5f5f5f; QUAD $0x5f5f5f5f5f5f5f5f // .space 16, '________________'

LCPI1_6:
	QUAD $0x1010101010101010; QUAD $0x1010101010101010 // .space 16, '\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'
	QUAD $0x1010101010101010; QUAD $0x1010101010101010 // .space 16, '\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10'

LCPI1_7:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI1_8:
	QUAD $0x0f0f0f0f0f0f0f0f; QUAD $0x0f0f0f0f0f0f0f0f // .space 16, '\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f'
	QUAD $0x0f0f0f0f0f0f0f0f; QUAD $0x0f0f0f0f0f0f0f0f // .space 16, '\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f'

LCPI1_9:
	BYTE $0x01 // .byte 1
	BYTE $0x02 // .byte 2
	BYTE $0x04 // .byte 4
	BYTE $0x08 // .byte 8
	BYTE $0x10 // .byte 16
	BYTE $0x20 // .byte 32
	BYTE $0x40 // .byte 64
	BYTE $0x80 // .byte 128
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x01 // .byte 1
	BYTE $0x02 // .byte 2
	BYTE $0x04 // .byte 4
	BYTE $0x08 // .byte 8
	BYTE $0x10 // .byte 16
	BYTE $0x20 // .byte 32
	BYTE $0x40 // .byte 64
	BYTE $0x80 // .byte 128
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0
	BYTE $0x00 // .byte 0

LCPI1_10:
	QUAD $0x3f3f3f3f3f3f3f3f; QUAD $0x3f3f3f3f3f3f3f3f // .space 16, '????????????????'
	QUAD $0x3f3f3f3f3f3f3f3f; QUAD $0x3f3f3f3f3f3f3f3f // .space 16, '????????????????'

LCPI1_11:
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1
	BYTE $0x40 // .byte 64
	BYTE $0x01 // .byte 1

LCPI1_12:
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1
	WORD $0x1000 // .word 4096
	WORD $0x0001 // .word 1

LCPI1_14:
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x06 // .byte 6
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x08 // .byte 8
	BYTE $0x0e // .byte 14
	BYTE $0x0d // .byte 13
	BYTE $0x0c // .byte 12
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x05 // .byte 5
	BYTE $0x04 // .byte 4
	BYTE $0x0a // .byte 10
	BYTE $0x09 // .byte 9
	BYTE $0x08 // .byte 8
	BYTE $0x0e // .byte 14
	BYTE $0x0d // .byte 13
	BYTE $0x0c // .byte 12
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'

LCPI1_13:
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x00 // .space 1, '\x00'
	BYTE $0x02 // .byte 2
	BYTE $0x01 // .byte 1
	BYTE $0x00 // .byte 0
	BYTE $0x06 // .byte 6

_b64decode:
	BYTE  $0x55                                 // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD  $0x5741                               // pushq        %r15
	WORD  $0x5641                               // pushq        %r14
	WORD  $0x5541                               // pushq        %r13
	WORD  $0x5441                               // pushq        %r12
	BYTE  $0x53                                 // pushq        %rbx
	SUBQ  $96, SP
	TESTQ DX, DX
	JE    LBB1_7
	MOVQ  0(DI), R10
	MOVQ  8(DI), AX
	ADDQ  R10, AX
	ADDQ  16(DI), R10
	LEAQ  0(SI)(DX*1), R9
	MOVL  CX, -44(BP)
	TESTB $1, CX
	LONG  $0x780d8d48; WORD $0x000a; BYTE $0x00 // leaq         $2680(%rip), %rcx  /* _VecDecodeCharsetStd(%rip) */
	LONG  $0x711d8d4c; WORD $0x000b; BYTE $0x00 // leaq         $2929(%rip), %r11  /* _VecDecodeCharsetURL(%rip) */
	LONG  $0xd9440f4c                           // cmoveq       %rcx, %r11
	LEAQ  -32(SI)(DX*1), R8
	MOVQ  SI, BX
	MOVQ  AX, -96(BP)
	MOVQ  AX, CX
	MOVQ  SI, R14
	MOVQ  SI, -80(BP)
	CMPQ  R8, SI
	MOVQ  R10, -72(BP)
	JB    LBB1_50
	TESTB $1, -44(BP)
	JE    LBB1_8
	QUAD  $0xfffffddf056ffec5                   // vmovdqu      $-545(%rip), %ymm0  /* LCPI1_1(%rip) */
	MOVQ  -72(BP), AX
	JNE   LBB1_9

LBB1_4:
	QUAD $0xfffffdf10d6ffec5 // vmovdqu      $-527(%rip), %ymm1  /* LCPI1_2(%rip) */
	JNE  LBB1_10

LBB1_5:
	QUAD $0xfffffe27156ffec5 // vmovdqu      $-473(%rip), %ymm2  /* LCPI1_4(%rip) */
	JNE  LBB1_11

LBB1_6:
	QUAD $0xfffffe5d1d6ffec5 // vmovdqu      $-419(%rip), %ymm3  /* LCPI1_6(%rip) */
	JMP  LBB1_12

LBB1_7:
	XORL CX, CX
	JMP  LBB1_192

LBB1_8:
	QUAD $0xfffffd8c056ffec5 // vmovdqu      $-628(%rip), %ymm0  /* LCPI1_0(%rip) */
	MOVQ -72(BP), AX
	JE   LBB1_4

LBB1_9:
	QUAD $0xfffffdde0d6ffec5 // vmovdqu      $-546(%rip), %ymm1  /* LCPI1_3(%rip) */
	JE   LBB1_5

LBB1_10:
	QUAD $0xfffffe14156ffec5 // vmovdqu      $-492(%rip), %ymm2  /* LCPI1_5(%rip) */
	JE   LBB1_6

LBB1_11:
	QUAD $0xfffffe4a1d6ffec5 // vmovdqu      $-438(%rip), %ymm3  /* LCPI1_7(%rip) */

LBB1_12:
	LEAQ -32(AX), R13
	LEAQ -1(R9), R15
	QUAD $0xfffffe5a256ffec5 // vmovdqu      $-422(%rip), %ymm4  /* LCPI1_8(%rip) */
	QUAD $0xfffffe722d6ffec5 // vmovdqu      $-398(%rip), %ymm5  /* LCPI1_9(%rip) */
	LONG $0xf6efc9c5         // vpxor        %xmm6, %xmm6, %xmm6
	QUAD $0xfffffea6056f7ec5 // vmovdqu      $-346(%rip), %ymm8  /* LCPI1_11(%rip) */
	QUAD $0xfffffebe0d6f7ec5 // vmovdqu      $-322(%rip), %ymm9  /* LCPI1_12(%rip) */
	QUAD $0xfffffef6156f7ac5 // vmovdqu      $-266(%rip), %xmm10  /* LCPI1_13(%rip) */
	QUAD $0xfffffece1d6f7ec5 // vmovdqu      $-306(%rip), %ymm11  /* LCPI1_14(%rip) */
	MOVQ $-4294967296, R12
	MOVQ -80(BP), AX
	MOVQ AX, BX
	MOVQ AX, R14
	MOVQ -96(BP), CX
	JMP  LBB1_16

LBB1_13:
	LONG $0x217f7ac5               // vmovdqu      %xmm12, (%rcx)
	LONG $0x397d63c4; WORD $0x01e7 // vextracti128 $1, %ymm12, %xmm7
	LONG $0x79d6f9c5; BYTE $0x10   // vmovq        %xmm7, $16(%rcx)

LBB1_14:
	ADDQ $32, BX
	ADDQ $24, CX
	MOVQ BX, R14
	MOVQ R14, BX
	CMPQ R8, R14
	JB   LBB1_49

LBB1_16:
	LONG $0x6f7e41c4; BYTE $0x26   // vmovdqu      (%r14), %ymm12
	LONG $0x7215c1c4; WORD $0x04d4 // vpsrld       $4, %ymm12, %ymm13
	LONG $0xecdb15c5               // vpand        %ymm4, %ymm13, %ymm13
	LONG $0xf4db1dc5               // vpand        %ymm4, %ymm12, %ymm14
	LONG $0x007542c4; BYTE $0xf6   // vpshufb      %ymm14, %ymm1, %ymm14
	LONG $0x005542c4; BYTE $0xfd   // vpshufb      %ymm13, %ymm5, %ymm15
	LONG $0xdb0541c4; BYTE $0xf6   // vpand        %ymm14, %ymm15, %ymm14
	LONG $0xf6740dc5               // vpcmpeqb     %ymm6, %ymm14, %ymm14
	LONG $0xd77dc1c4; BYTE $0xc6   // vpmovmskb    %ymm14, %eax
	ORQ  R12, AX
	LONG $0xbc0f48f3; BYTE $0xc0   // tzcntq       %rax, %rax
	CMPL AX, $31
	JA   LBB1_30
	MOVQ CX, R10
	XORL CX, CX
	CMPQ R9, BX
	JBE  LBB1_32
	XORL DX, DX

LBB1_19:
	MOVBLZX 0(BX), AX
	CMPQ    AX, $10
	JE      LBB1_23
	CMPB    AX, $13
	JE      LBB1_23
	MOVBLZX 0(R11)(AX*1), AX
	CMPL    AX, $255
	JE      LBB1_25
	INCL    CX
	SHLL    $6, DX
	ORL     AX, DX

LBB1_23:
	INCQ BX
	CMPQ BX, R9
	JAE  LBB1_25
	CMPL CX, $4
	JL   LBB1_19

LBB1_25:
	CMPL CX, $1
	JE   LBB1_47
	CMPL CX, $3
	JG   LBB1_39
	CMPQ BX, R9
	JE   LBB1_37
	CMPL CX, $3
	JNE  LBB1_33
	CMPB 0(BX), $61
	LEAQ 1(BX), BX
	MOVL $3, CX
	JE   LBB1_36
	JMP  LBB1_47

LBB1_30:
	LONG $0x007d42c4; BYTE $0xed   // vpshufb      %ymm13, %ymm0, %ymm13
	LONG $0xf2741dc5               // vpcmpeqb     %ymm2, %ymm12, %ymm14
	LONG $0x4c1563c4; WORD $0xe0eb // vpblendvb    %ymm14, %ymm3, %ymm13, %ymm13
	LONG $0xfc1541c4; BYTE $0xe4   // vpaddb       %ymm12, %ymm13, %ymm12
	QUAD $0xfffffd6a25db1dc5       // vpand        $-662(%rip), %ymm12, %ymm12  /* LCPI1_10(%rip) */
	LONG $0x041d42c4; BYTE $0xe0   // vpmaddubsw   %ymm8, %ymm12, %ymm12
	LONG $0xf51d41c4; BYTE $0xe1   // vpmaddwd     %ymm9, %ymm12, %ymm12
	LONG $0x397d63c4; WORD $0x01e7 // vextracti128 $1, %ymm12, %xmm7
	LONG $0x0041c2c4; BYTE $0xfa   // vpshufb      %xmm10, %xmm7, %xmm7
	LONG $0x001d42c4; BYTE $0xe3   // vpshufb      %ymm11, %ymm12, %ymm12
	LONG $0x021de3c4; WORD $0x08ff // vpblendd     $8, %ymm7, %ymm12, %ymm7
	LONG $0x024563c4; WORD $0xc0e6 // vpblendd     $192, %ymm6, %ymm7, %ymm12
	CMPQ R13, CX
	JB   LBB1_13
	LONG $0x217f7ec5               // vmovdqu      %ymm12, (%rcx)
	JMP  LBB1_14

LBB1_32:
	MOVL $0, DX
	CMPQ R9, BX
	JE   LBB1_37

LBB1_33:
	CMPQ BX, R15
	JAE  LBB1_47
	CMPB 0(BX), $61
	JNE  LBB1_46
	CMPB 1(BX), $61
	LEAQ 2(BX), BX
	JNE  LBB1_47

LBB1_36:
	CMPQ BX, R9
	JAE  LBB1_38
	JMP  LBB1_47

LBB1_37:
	MOVQ  R9, BX
	TESTB $2, -44(BP)
	JE    LBB1_47

LBB1_38:
	MOVB    $4, AX
	SUBB    CX, AX
	MOVBLZX AX, AX
	ADDL    AX, AX
	LEAL    0(AX)(AX*2), AX
	LONG    $0xf779e2c4; BYTE $0xd2 // shlxl        %eax, %edx, %edx

LBB1_39:
	CMPL CX, $2
	JE   LBB1_44
	CMPL CX, $3
	JE   LBB1_43
	CMPL CX, $4
	MOVQ R10, SI
	JNE  LBB1_45
	MOVB DX, 2(SI)

LBB1_43:
	MOVQ R10, AX
	MOVB DH, 1(AX)

LBB1_44:
	SHRL $16, DX
	MOVQ R10, SI
	MOVB DX, 0(R10)

LBB1_45:
	MOVLQSX CX, AX
	LEAQ    -1(SI)(AX*1), CX
	MOVQ    BX, R14
	MOVQ    R14, BX
	CMPQ    R8, R14
	JAE     LBB1_16
	JMP     LBB1_49

LBB1_46:
	INCQ BX

LBB1_47:
	SUBQ R14, BX
	JNE  LBB1_176
	MOVQ R10, CX
	MOVQ R14, BX
	CMPQ R8, R14
	JAE  LBB1_16

LBB1_49:
	MOVQ R14, BX
	MOVQ -72(BP), R10

LBB1_50:
	LEAQ -8(R10), AX
	MOVQ AX, -136(BP)
	CMPQ AX, CX
	MOVQ R11, -56(BP)
	MOVQ DI, -88(BP)
	JB   LBB1_89
	LEAQ -8(R9), AX
	MOVQ AX, -128(BP)
	CMPQ AX, BX
	JB   LBB1_89
	LEAQ -1(R9), AX
	MOVQ AX, -120(BP)
	MOVQ R9, -104(BP)

LBB1_53:
	MOVQ    R14, -112(BP)
	MOVQ    CX, -64(BP)
	MOVBQSX 0(BX), AX
	MOVBLZX 0(R11)(AX*1), R12
	MOVBQSX 1(BX), CX
	MOVBLZX 0(R11)(CX*1), R13
	MOVBQSX 2(BX), CX
	MOVQ    R11, DI
	MOVBLZX 0(R11)(CX*1), R11
	MOVBQSX 3(BX), CX
	MOVBLZX 0(DI)(CX*1), CX
	MOVBQSX 4(BX), DX
	MOVBLZX 0(DI)(DX*1), R8
	MOVBQSX 5(BX), DX
	MOVBLZX 0(DI)(DX*1), R9
	MOVBQSX 6(BX), DX
	MOVBLZX 0(DI)(DX*1), DX
	MOVL    R13, SI
	ORL     R12, SI
	MOVL    CX, R14
	ORL     R11, R14
	ORL     SI, R14
	MOVL    R9, SI
	ORL     R8, SI
	MOVL    DX, R10
	ORL     SI, R10
	MOVBQSX 7(BX), SI
	MOVBLZX 0(DI)(SI*1), R15
	ORL     R14, R10
	MOVL    R15, SI
	ORL     R10, SI
	CMPB    SI, $-1
	JE      LBB1_55
	SHLQ    $58, R12
	SHLQ    $52, R13
	ORQ     R12, R13
	SHLQ    $46, R11
	SHLQ    $40, CX
	ORQ     R11, CX
	ORQ     R13, CX
	SHLQ    $34, R8
	SHLQ    $28, R9
	ORQ     R8, R9
	SHLQ    $22, DX
	ORQ     R9, DX
	ORQ     CX, DX
	SHLQ    $16, R15
	ORQ     DX, R15
	BSWAPQ  R15
	MOVQ    -64(BP), CX
	MOVQ    R15, 0(CX)
	ADDQ    $8, BX
	ADDQ    $6, CX
	MOVQ    BX, R14
	MOVQ    -56(BP), R11
	MOVQ    -104(BP), R9
	JMP     LBB1_86

LBB1_55:
	MOVQ -104(BP), R9
	CMPQ R9, BX
	JBE  LBB1_63
	INCQ BX
	XORL DX, DX
	XORL CX, CX
	MOVQ -56(BP), R11
	MOVQ -112(BP), R14
	CMPB AX, $10
	JE   LBB1_60

LBB1_57:
	CMPB    AX, $13
	JE      LBB1_60
	MOVBLZX AX, AX
	MOVBLZX 0(R11)(AX*1), AX
	CMPL    AX, $255
	JE      LBB1_67
	INCL    DX
	SHLL    $6, CX
	ORL     AX, CX

LBB1_60:
	CMPQ    BX, R9
	JAE     LBB1_68
	CMPL    DX, $3
	JG      LBB1_68
	MOVBLZX 0(BX), AX
	INCQ    BX
	CMPB    AX, $10
	JNE     LBB1_57
	JMP     LBB1_60

LBB1_63:
	XORL DX, DX
	MOVL $0, CX
	CMPQ R9, BX
	MOVQ -56(BP), R11
	MOVQ -112(BP), R14
	JE   LBB1_74

LBB1_64:
	CMPQ BX, -120(BP)
	JAE  LBB1_84
	CMPB 0(BX), $61
	JNE  LBB1_83
	CMPB 1(BX), $61
	LEAQ 2(BX), BX
	JE   LBB1_73
	JMP  LBB1_84

LBB1_67:
	DECQ BX

LBB1_68:
	CMPL DX, $1
	JE   LBB1_84
	CMPL DX, $3
	JG   LBB1_76
	CMPQ BX, R9
	JE   LBB1_74
	CMPL DX, $3
	JNE  LBB1_64
	CMPB 0(BX), $61
	LEAQ 1(BX), BX
	MOVL $3, DX
	JNE  LBB1_84

LBB1_73:
	CMPQ BX, R9
	JAE  LBB1_75
	JMP  LBB1_84

LBB1_74:
	MOVQ  R9, BX
	TESTB $2, -44(BP)
	JE    LBB1_84

LBB1_75:
	MOVB    $4, AX
	SUBB    DX, AX
	MOVBLZX AX, AX
	ADDL    AX, AX
	LEAL    0(AX)(AX*2), AX
	LONG    $0xf779e2c4; BYTE $0xc9 // shlxl        %eax, %ecx, %ecx

LBB1_76:
	CMPL DX, $2
	JE   LBB1_81
	CMPL DX, $3
	JE   LBB1_80
	CMPL DX, $4
	MOVQ -64(BP), SI
	JNE  LBB1_82
	MOVB CX, 2(SI)

LBB1_80:
	MOVQ -64(BP), AX
	MOVB CH, 1(AX)

LBB1_81:
	SHRL $16, CX
	MOVQ -64(BP), SI
	MOVB CX, 0(SI)

LBB1_82:
	MOVLQSX DX, AX
	LEAQ    -1(SI)(AX*1), CX
	MOVQ    BX, R14
	JMP     LBB1_86

LBB1_83:
	INCQ BX

LBB1_84:
	SUBQ R14, BX
	JNE  LBB1_176
	MOVQ -64(BP), CX

LBB1_86:
	CMPQ -136(BP), CX
	JB   LBB1_88
	MOVQ R14, BX
	CMPQ -128(BP), R14
	JAE  LBB1_53

LBB1_88:
	MOVQ R14, BX
	MOVQ -88(BP), DI

LBB1_89:
	MOVQ  R14, R13
	NEGQ  R13
	MOVQ  -72(BP), AX
	ADDQ  $-4, AX
	MOVQ  AX, -72(BP)
	CMPQ  AX, CX
	JB    LBB1_165
	LEAQ  -4(R9), R15
	CMPQ  R15, BX
	JB    LBB1_165
	LEAQ  -1(R9), AX
	MOVQ  AX, -64(BP)
	TESTB $2, -44(BP)
	JNE   LBB1_130
	MOVQ  BX, DX

LBB1_93:
	MOVQ    R14, DI
	MOVQ    CX, R14
	MOVBQSX 0(DX), SI
	MOVQ    R11, BX
	MOVBLZX 0(R11)(SI*1), R11
	MOVBQSX 1(DX), AX
	MOVBLZX 0(BX)(AX*1), R10
	MOVBQSX 2(DX), CX
	MOVBLZX 0(BX)(CX*1), R8
	MOVBQSX 3(DX), CX
	MOVBLZX 0(BX)(CX*1), CX
	MOVL    R10, AX
	ORL     R11, AX
	MOVL    R8, BX
	ORL     CX, BX
	ORL     AX, BX
	CMPB    BX, $-1
	JE      LBB1_95
	SHLL    $26, R11
	SHLL    $20, R10
	ORL     R11, R10
	SHLL    $14, R8
	SHLL    $8, CX
	ORL     R8, CX
	ORL     R10, CX
	BSWAPL  CX
	MOVL    CX, 0(R14)
	MOVQ    R14, CX
	ADDQ    $4, DX
	ADDQ    $3, CX
	MOVQ    DX, R14
	MOVQ    -56(BP), R11
	MOVQ    R14, R13
	NEGQ    R13
	CMPQ    -72(BP), CX
	JAE     LBB1_121
	JMP     LBB1_164

LBB1_95:
	CMPQ R9, DX
	JBE  LBB1_103
	INCQ DX
	XORL CX, CX
	XORL AX, AX
	MOVQ -56(BP), R11
	CMPB SI, $10
	JE   LBB1_100

LBB1_97:
	CMPB    SI, $13
	JE      LBB1_100
	MOVBLZX SI, SI
	MOVBLZX 0(R11)(SI*1), SI
	CMPL    SI, $255
	JE      LBB1_108
	INCL    CX
	SHLL    $6, AX
	ORL     SI, AX

LBB1_100:
	CMPQ    DX, R9
	JAE     LBB1_109
	CMPL    CX, $3
	JG      LBB1_109
	MOVBLZX 0(DX), SI
	INCQ    DX
	CMPB    SI, $10
	JNE     LBB1_97
	JMP     LBB1_100

LBB1_103:
	XORL AX, AX
	MOVL $0, CX
	MOVQ R9, BX
	CMPQ R9, DX
	MOVQ -56(BP), R11
	JE   LBB1_119

LBB1_104:
	CMPQ DX, -64(BP)
	JAE  LBB1_118
	CMPB 0(DX), $61
	JNE  LBB1_117
	LEAQ 2(DX), BX
	CMPB 1(DX), $61
	MOVQ BX, DX
	JE   LBB1_115
	JMP  LBB1_119

LBB1_108:
	DECQ DX

LBB1_109:
	CMPL CX, $1
	JE   LBB1_118
	CMPL CX, $3
	JG   LBB1_123
	MOVQ R9, BX
	CMPQ DX, R9
	JE   LBB1_119
	CMPL CX, $3
	JNE  LBB1_104
	LEAQ 1(DX), BX
	MOVL $3, CX
	CMPB 0(DX), $61
	MOVQ BX, DX
	JNE  LBB1_119

LBB1_115:
	CMPQ    DX, R9
	JB      LBB1_118
	MOVB    $4, BX
	SUBB    CX, BX
	MOVBLZX BX, SI
	ADDL    SI, SI
	LEAL    0(SI)(SI*2), SI
	LONG    $0xf749e2c4; BYTE $0xc0 // shlxl        %esi, %eax, %eax

LBB1_123:
	CMPL CX, $2
	JE   LBB1_128
	CMPL CX, $3
	JE   LBB1_127
	CMPL CX, $4
	MOVQ R14, SI
	JNE  LBB1_129
	MOVB AX, 2(SI)

LBB1_127:
	MOVQ R14, SI
	MOVB AH, 1(SI)

LBB1_128:
	SHRL $16, AX
	MOVQ R14, SI
	MOVB AX, 0(R14)

LBB1_129:
	MOVLQSX CX, AX
	LEAQ    -1(SI)(AX*1), CX
	MOVQ    DX, R14
	MOVQ    R14, R13
	NEGQ    R13
	CMPQ    -72(BP), CX
	JAE     LBB1_121
	JMP     LBB1_164

LBB1_117:
	INCQ DX

LBB1_118:
	MOVQ DX, BX

LBB1_119:
	SUBQ DI, BX
	MOVQ R14, CX
	MOVQ DI, R14
	JNE  LBB1_175
	MOVQ R14, R13
	NEGQ R13
	CMPQ -72(BP), CX
	JB   LBB1_164

LBB1_121:
	MOVQ R14, DX
	CMPQ R15, R14
	JAE  LBB1_93

LBB1_164:
	MOVQ R14, BX
	MOVQ -88(BP), DI

LBB1_165:
	CMPQ R9, BX
	JBE  LBB1_191
	MOVQ CX, SI
	XORL AX, AX
	XORL CX, CX

LBB1_167:
	MOVBLZX 0(BX), DX
	CMPQ    DX, $10
	JE      LBB1_171
	CMPB    DX, $13
	JE      LBB1_171
	MOVBLZX 0(R11)(DX*1), DX
	CMPL    DX, $255
	JE      LBB1_173
	INCL    AX
	SHLL    $6, CX
	ORL     DX, CX

LBB1_171:
	INCQ BX
	CMPQ BX, R9
	JAE  LBB1_173
	CMPL AX, $4
	JL   LBB1_167

LBB1_173:
	CMPL AX, $1
	JNE  LBB1_177

LBB1_174:
	SUBQ R14, BX
	MOVQ SI, CX
	JE   LBB1_191

LBB1_175:
	ADDQ -80(BP), R13
	SUBQ BX, R13
	MOVQ R13, CX
	JMP  LBB1_192

LBB1_130:
	MOVQ    R14, R12
	MOVQ    CX, R14
	MOVBQSX 0(BX), AX
	MOVBLZX 0(R11)(AX*1), R10
	MOVBQSX 1(BX), CX
	MOVQ    R11, SI
	MOVBLZX 0(R11)(CX*1), R11
	MOVBQSX 2(BX), DX
	MOVBLZX 0(SI)(DX*1), R8
	MOVBQSX 3(BX), DX
	MOVBLZX 0(SI)(DX*1), DX
	MOVL    R11, CX
	ORL     R10, CX
	MOVL    R8, SI
	ORL     DX, SI
	ORL     CX, SI
	CMPB    SI, $-1
	JE      LBB1_132
	SHLL    $26, R10
	SHLL    $20, R11
	ORL     R10, R11
	SHLL    $14, R8
	SHLL    $8, DX
	ORL     R8, DX
	ORL     R11, DX
	BSWAPL  DX
	MOVQ    R14, CX
	MOVL    DX, 0(R14)
	ADDQ    $4, BX
	ADDQ    $3, CX
	MOVQ    BX, R14
	MOVQ    -56(BP), R11
	MOVQ    R14, R13
	NEGQ    R13
	CMPQ    -72(BP), CX
	JAE     LBB1_154
	JMP     LBB1_164

LBB1_132:
	CMPQ R9, BX
	JBE  LBB1_140
	INCQ BX
	XORL CX, CX
	XORL DX, DX
	MOVQ -56(BP), R11
	CMPB AX, $10
	JE   LBB1_137

LBB1_134:
	CMPB    AX, $13
	JE      LBB1_137
	MOVBLZX AX, AX
	MOVBLZX 0(R11)(AX*1), AX
	CMPL    AX, $255
	JE      LBB1_144
	INCL    CX
	SHLL    $6, DX
	ORL     AX, DX

LBB1_137:
	CMPQ    BX, R9
	JAE     LBB1_145
	CMPL    CX, $3
	JG      LBB1_145
	MOVBLZX 0(BX), AX
	INCQ    BX
	CMPB    AX, $10
	JNE     LBB1_134
	JMP     LBB1_137

LBB1_140:
	XORL DX, DX
	MOVL $0, CX
	MOVQ R9, AX
	CMPQ R9, BX
	MOVQ -56(BP), R11
	JE   LBB1_156

LBB1_141:
	CMPQ BX, -64(BP)
	JAE  LBB1_152
	CMPB 0(BX), $61
	JNE  LBB1_151
	LEAQ 2(BX), AX
	CMPB 1(BX), $61
	MOVQ AX, BX
	JE   LBB1_150
	JMP  LBB1_152

LBB1_144:
	DECQ BX

LBB1_145:
	CMPL CX, $1
	JE   LBB1_152
	CMPL CX, $3
	JG   LBB1_157
	CMPQ BX, R9
	JE   LBB1_155
	CMPL CX, $3
	JNE  LBB1_141
	LEAQ 1(BX), AX
	MOVL $3, CX
	CMPB 0(BX), $61
	MOVQ AX, BX
	JNE  LBB1_152

LBB1_150:
	MOVQ AX, BX
	CMPQ AX, R9
	JB   LBB1_152
	JMP  LBB1_156

LBB1_151:
	INCQ BX

LBB1_152:
	SUBQ R12, BX
	MOVQ R14, CX
	MOVQ R12, R14
	JNE  LBB1_175
	MOVQ R14, R13
	NEGQ R13
	CMPQ -72(BP), CX
	JB   LBB1_164

LBB1_154:
	MOVQ R14, BX
	CMPQ R15, R14
	JAE  LBB1_130
	JMP  LBB1_164

LBB1_155:
	MOVQ R9, AX

LBB1_156:
	MOVB    $4, BX
	SUBB    CX, BX
	MOVBLZX BX, SI
	ADDL    SI, SI
	LEAL    0(SI)(SI*2), SI
	LONG    $0xf749e2c4; BYTE $0xd2 // shlxl        %esi, %edx, %edx
	MOVQ    AX, BX

LBB1_157:
	CMPL CX, $2
	JE   LBB1_162
	CMPL CX, $3
	JE   LBB1_161
	CMPL CX, $4
	MOVQ R14, SI
	JNE  LBB1_163
	MOVB DX, 2(SI)

LBB1_161:
	MOVQ R14, AX
	MOVB DH, 1(AX)

LBB1_162:
	SHRL $16, DX
	MOVQ R14, SI
	MOVB DX, 0(R14)

LBB1_163:
	MOVLQSX CX, AX
	LEAQ    -1(SI)(AX*1), CX
	MOVQ    BX, R14
	MOVQ    R14, R13
	NEGQ    R13
	CMPQ    -72(BP), CX
	JAE     LBB1_154
	JMP     LBB1_164

LBB1_176:
	MOVQ -80(BP), AX
	SUBQ R14, AX
	SUBQ BX, AX
	MOVQ AX, CX
	JMP  LBB1_192

LBB1_177:
	CMPL AX, $3
	JG   LBB1_184
	CMPQ BX, R9
	JE   LBB1_182
	CMPL AX, $3
	JNE  LBB1_193
	CMPB 0(BX), $61
	LEAQ 1(BX), BX
	JNE  LBB1_174

LBB1_181:
	CMPQ BX, R9
	JB   LBB1_174
	JMP  LBB1_183

LBB1_182:
	MOVQ  R9, BX
	TESTB $2, -44(BP)
	JE    LBB1_174

LBB1_183:
	MOVB    $4, DX
	SUBB    AX, DX
	MOVBLZX DX, DX
	ADDL    DX, DX
	LEAL    0(DX)(DX*2), DX
	LONG    $0xf769e2c4; BYTE $0xc9 // shlxl        %edx, %ecx, %ecx

LBB1_184:
	CMPL AX, $2
	JE   LBB1_189
	CMPL AX, $3
	JE   LBB1_188
	CMPL AX, $4
	MOVQ SI, DX
	JNE  LBB1_190
	MOVB CX, 2(DX)

LBB1_188:
	MOVQ SI, DX
	MOVB CH, 1(SI)

LBB1_189:
	SHRL $16, CX
	MOVQ SI, DX
	MOVB CX, 0(SI)

LBB1_190:
	WORD $0x9848          // cltq
	LEAQ -1(DX)(AX*1), CX

LBB1_191:
	SUBQ -96(BP), CX
	ADDQ CX, 8(DI)

LBB1_192:
	MOVQ CX, AX
	ADDQ $96, SP
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB1_193:
	LEAQ -1(R9), DX
	CMPQ BX, DX
	JAE  LBB1_174
	CMPB 0(BX), $61
	JNE  LBB1_196
	CMPB 1(BX), $61
	LEAQ 2(BX), BX
	JNE  LBB1_174
	JMP  LBB1_181

LBB1_196:
	INCQ BX
	JMP  LBB1_174

_TabEncodeCharsetStd:
	QUAD $0x4847464544434241; QUAD $0x504f4e4d4c4b4a49 // .ascii 16, 'ABCDEFGHIJKLMNOP'
	QUAD $0x5857565554535251; QUAD $0x6665646362615a59 // .ascii 16, 'QRSTUVWXYZabcdef'
	QUAD $0x6e6d6c6b6a696867; QUAD $0x767574737271706f // .ascii 16, 'ghijklmnopqrstuv'
	QUAD $0x333231307a797877; QUAD $0x2f2b393837363534 // .ascii 16, 'wxyz0123456789+/'

_VecEncodeCharsetStd:
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x000041f0edfcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xed\xf0A\x00\x00'
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x000041f0edfcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xed\xf0A\x00\x00'

_TabEncodeCharsetURL:
	QUAD $0x4847464544434241; QUAD $0x504f4e4d4c4b4a49 // .ascii 16, 'ABCDEFGHIJKLMNOP'
	QUAD $0x5857565554535251; QUAD $0x6665646362615a59 // .ascii 16, 'QRSTUVWXYZabcdef'
	QUAD $0x6e6d6c6b6a696867; QUAD $0x767574737271706f // .ascii 16, 'ghijklmnopqrstuv'
	QUAD $0x333231307a797877; QUAD $0x5f2d393837363534 // .ascii 16, 'wxyz0123456789-_'

_VecEncodeCharsetURL:
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x00004120effcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xef A\x00\x00'
	QUAD $0xfcfcfcfcfcfcfc47; QUAD $0x00004120effcfcfc // .asciz 16, 'G\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xef A\x00\x00'

_VecDecodeCharsetStd:
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0x3fffffff3effffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\xff\xff\xff?'
	QUAD $0x3b3a393837363534; QUAD $0xffffffffffff3d3c // .ascii 16, '456789:;<=\xff\xff\xff\xff\xff\xff'
	QUAD $0x06050403020100ff; QUAD $0x0e0d0c0b0a090807 // .ascii 16, '\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e'
	QUAD $0x161514131211100f; QUAD $0xffffffffff191817 // .ascii 16, '\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff\xff'
	QUAD $0x201f1e1d1c1b1aff; QUAD $0x2827262524232221 // .ascii 16, '\xff\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'('
	QUAD $0x302f2e2d2c2b2a29; QUAD $0xffffffffff333231 // .ascii 16, ')*+,-./0123\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'

_VecDecodeCharsetURL:
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffff3effffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff>\xff\xff'
	QUAD $0x3b3a393837363534; QUAD $0xffffffffffff3d3c // .ascii 16, '456789:;<=\xff\xff\xff\xff\xff\xff'
	QUAD $0x06050403020100ff; QUAD $0x0e0d0c0b0a090807 // .ascii 16, '\xff\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e'
	QUAD $0x161514131211100f; QUAD $0x3fffffffff191817 // .ascii 16, '\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\xff\xff\xff\xff?'
	QUAD $0x201f1e1d1c1b1aff; QUAD $0x2827262524232221 // .ascii 16, '\xff\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'('
	QUAD $0x302f2e2d2c2b2a29; QUAD $0xffffffffff333231 // .ascii 16, ')*+,-./0123\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0xffffffffffffffff; QUAD $0xffffffffffffffff // .ascii 16, '\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff'

TEXT Â·__b64decode(SB), NOSPLIT, $0 - 40
	MOVQ out+0(FP), DI
	MOVQ src+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ mode+24(FP), CX
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+1447(SB) // _b64decode
	MOVQ AX, ret+32(FP)
	RET

TEXT Â·__b64encode(SB), NOSPLIT, $0 - 24
	MOVQ out+0(FP), DI
	MOVQ src+8(FP), SI
	MOVQ mode+16(FP), DX
	LEAQ Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+224(SB), AX // _b64encode
	JMP  AX
